name: Release kotlin
on:
  workflow_dispatch:
    inputs:
      retVersion:
        required: true

jobs:
  build:
    runs-on: ${{ matrix.build-target.runner }}
    continue-on-error: false
    strategy:
      matrix:
        build-target:
          # Linux Targets
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-unknown-linux-gnu
            runner: ubuntu-20.04
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-apple-darwin
            runner: macos-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-apple-darwin
            runner: macos-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - crate: radix-engine-toolkit-uniffi
            target-triple: x86_64-pc-windows-gnu
            runner: ubuntu-latest
    steps:
      - name: Checkout
        uses: RDXWorks-actions/checkout@main
      - name: Install Rust Target
        run: |
          # Install stable 
          rustup toolchain install stable

          # Add target
          rustup +stable target install ${{ matrix.build-target.target-triple }}

          # Install the stable toolchain of the target of this machine.
          DEFAULT_TARGET=$(rustc -vV | sed -n 's|host: ||p')
          rustup component add rust-src --toolchain stable-$DEFAULT_TARGET
      - name: Build dependencies (x86_64-pc-windows-gnu)
        if: ${{ matrix.build-target.target-triple == 'x86_64-pc-windows-gnu' }}
        run: |
          sudo apt-get install -y mingw-w64
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "AR=x86_64-w64-mingw32-gcc-ar" >> $GITHUB_ENV
      - name: Build Dependencies (aarch64 linux)
        if: ${{ matrix.build-target.target-triple == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR=aarch64-linux-gnu-gcc-ar" >> $GITHUB_ENV
      - name: Build
        working-directory: ${{ matrix.build-target.crate }}
        run: |
          cargo build \
            --target ${{ matrix.build-target.target-triple }} \
            --release
      - name: Clean Build Artifacts
        run: find "./${{ matrix.build-target.crate }}/target/${{ matrix.build-target.target-triple }}/release" -mindepth 1 -maxdepth 1 -type d -exec rm -r {} \;
      - name: Upload Artifacts
        uses: RDXWorks-actions/upload-artifact@main
        with:
          name: ${{ matrix.build-target.crate }}-${{ matrix.build-target.target-triple }}
          path: "./${{ matrix.build-target.crate }}/target/${{ matrix.build-target.target-triple }}/release"
  generate-uniffi-bindings:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: RDXWorks-actions/checkout@main
      - name: Clone uniffi-bindgen-cs
        uses: RDXWorks-actions/checkout@main
        with:
          repository: radixdlt/uniffi-bindgen-cs
          path: uniffi-bindgen-cs
          submodules: 'recursive'
          ref: f1a6ef67449b47028fd5c3d8e5c6d3b80ddefd2b
      - uses: RDXWorks-actions/download-artifact@main
        with:
          path: artifacts
      - name: Generate the Bindings
        run: |
          # Generating the path of the dynamic library
          DYNAMIC_LIBRARY_PATH="./artifacts/radix-engine-toolkit-uniffi-x86_64-unknown-linux-gnu/libradix_engine_toolkit_uniffi.so"
          OUTPUT_DIRECTORY="./uniffi-bindings"

          for LANGUAGE in "kotlin" 
          do
            cargo run \
              --manifest-path="./uniffi-bindgen/Cargo.toml" -- \
              generate ./radix-engine-toolkit-uniffi/src/radix_engine_toolkit_uniffi.udl \
              --language $LANGUAGE \
              --out-dir $OUTPUT_DIRECTORY \
              --lib-file $DYNAMIC_LIBRARY_PATH
          done

          cargo run \
            --manifest-path="./uniffi-bindgen-cs/bindgen/Cargo.toml" -- \
            ./radix-engine-toolkit-uniffi/src/radix_engine_toolkit_uniffi.udl \
            --out-dir $OUTPUT_DIRECTORY \
            --lib-file $DYNAMIC_LIBRARY_PATH
      - name: Upload Artifacts
        uses: RDXWorks-actions/upload-artifact@main
        with:
          name: uniffi-bindings
          path: uniffi-bindings
  publish-kotlin-maven-central:
    needs: [generate-uniffi-bindings]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Install AWS CLI
        uses: RDXWorks-actions/install-aws-cli-action@master
        with:
          version: 2
      - name: Checkout actions-oidc-debugger
        uses: RDXWorks-actions/checkout@main
        with:
          repository: github/actions-oidc-debugger
          ref: main
          token: ${{ github.token }}
          path: ./.github/actions/actions-oidc-debugger
      - name: Debug OIDC Claims
        uses: ./.github/actions/actions-oidc-debugger
        with:
          audience: 'https://github.com/github'
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: 'arn:aws:iam::${{ secrets.SECRETS_ACCOUNT_ID }}:role/gh-radix-engine-toolkit-secrets-read-access'
          app_name: 'radix-engine-toolkit'
          step_name: 'fetch-maven'
          secret_prefix: 'MAVEN_CENTRAL'
          secret_name: 'arn:aws:secretsmanager:eu-west-2:${{ secrets.SECRETS_ACCOUNT_ID }}:secret:github-actions/radixdlt/radix-engine-toolkit/maven-wAbmDe'
          parse_json: true

      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: 'arn:aws:iam::${{ secrets.SECRETS_ACCOUNT_ID }}:role/gh-radix-engine-toolkit-secrets-read-access'
          app_name: 'radix-engine-toolkit'
          step_name: 'gpg-passprhase'
          secret_prefix: 'GPG_PASSPHRASE'
          secret_name: 'arn:aws:secretsmanager:eu-west-2:${{ secrets.SECRETS_ACCOUNT_ID }}:secret:github-actions/radixdlt/radix-engine-toolkit/gpg-passphrase-S59PVR'
          parse_json: true
      - uses: RDXWorks-actions/checkout@main
      - uses: RDXWorks-actions/download-artifact@main
        with:
          path: artifacts
      - name: Create Kotlin Library
        working-directory: interop/kotlin
        run: |
          ./bootstrap.sh
      - name: Setup Gradle
        uses: RDXWorks-actions/gradle-build-action@main
        with:
          gradle-version: 8.4
          arguments: wrapper -p interop/kotlin/ret-kotlin
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: 'arn:aws:iam::${{ secrets.SECRETS_ACCOUNT_ID }}:role/gh-radix-engine-toolkit-secrets-read-access'
          app_name: 'radix-engine-toolkit'
          step_name: 'gpg'
          secret_prefix: 'GPG_BINARY'
          secret_name: 'arn:aws:secretsmanager:eu-west-2:${{ secrets.SECRETS_ACCOUNT_ID }}:secret:github-actions/radixdlt/radix-engine-toolkit/gpg-UQP0tq'
          parse_json: true
      - name: Get GPG key to sign
        working-directory: interop/kotlin/ret-kotlin
        run: |
          echo "${{ env.GPG_BINARY }}" | base64 --decode > rdx-secring.gpg
          cp rdx-secring.gpg lib/rdx-secring.gpg

      - name: Build and publish Kotlin
        uses: RDXWorks-actions/gradle-build-action@main
        with:
          arguments: build javadoc publishMavenCentralPublicationToMavenCentralRepository -Pret-version=${{ inputs.retVersion }} -Psigning.secretKeyRingFile=rdx-secring.gpg -Psigning.password=${{ env.GPG_PASSPHRASE_GPG_PASSPHRASE }} -Psigning.keyId=${{ secrets.GPG_KEY_ID }} -PossrhUsername=${{ env.MAVEN_CENTRAL_MAVEN_CENTRAL_USERNAME }} -PossrhPassword=${{ env.MAVEN_CENTRAL_MAVEN_CENTRAL_PASSWORD }}
          build-root-directory: interop/kotlin/ret-kotlin
